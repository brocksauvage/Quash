==12280== Memcheck, a memory error detector
==12280== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==12280== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==12280== Command: /home/bsauvage/EECS678/Quash/quash/quash
==12280== 
==12443== Invalid write of size 1
==12443==    at 0x40255D: get_current_directory (execute.c:44)
==12443==    by 0x4027FB: run_pwd (execute.c:189)
==12443==    by 0x4028DC: child_run_command (execute.c:232)
==12443==    by 0x402AFD: create_process (execute.c:369)
==12443==    by 0x402C61: run_script (execute.c:400)
==12443==    by 0x401336: main (quash.c:132)
==12443==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==12443== 
==12443== 
==12443== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==12443==  Access not within mapped region at address 0x0
==12443==    at 0x40255D: get_current_directory (execute.c:44)
==12443==    by 0x4027FB: run_pwd (execute.c:189)
==12443==    by 0x4028DC: child_run_command (execute.c:232)
==12443==    by 0x402AFD: create_process (execute.c:369)
==12443==    by 0x402C61: run_script (execute.c:400)
==12443==    by 0x401336: main (quash.c:132)
==12443==  If you believe this happened as a result of a stack
==12443==  overflow in your program's main thread (unlikely but
==12443==  possible), you can try to increase the size of the
==12443==  main thread stack using the --main-stacksize= flag.
==12443==  The main thread stack size used in this run was 8388608.
==12453== Invalid write of size 1
==12453==    at 0x40255D: get_current_directory (execute.c:44)
==12453==    by 0x4027FB: run_pwd (execute.c:189)
==12453==    by 0x4028DC: child_run_command (execute.c:232)
==12453==    by 0x402AFD: create_process (execute.c:369)
==12453==    by 0x402C61: run_script (execute.c:400)
==12453==    by 0x401336: main (quash.c:132)
==12453==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==12453== 
==12453== 
==12453== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==12453==  Access not within mapped region at address 0x0
==12453==    at 0x40255D: get_current_directory (execute.c:44)
==12453==    by 0x4027FB: run_pwd (execute.c:189)
==12453==    by 0x4028DC: child_run_command (execute.c:232)
==12453==    by 0x402AFD: create_process (execute.c:369)
==12453==    by 0x402C61: run_script (execute.c:400)
==12453==    by 0x401336: main (quash.c:132)
==12453==  If you believe this happened as a result of a stack
==12453==  overflow in your program's main thread (unlikely but
==12453==  possible), you can try to increase the size of the
==12453==  main thread stack using the --main-stacksize= flag.
==12453==  The main thread stack size used in this run was 8388608.
==12443== 
==12443== HEAP SUMMARY:
==12443==     in use at exit: 18,754 bytes in 6 blocks
==12443==   total heap usage: 10 allocs, 4 frees, 1,068,674 bytes allocated
==12443== 
==12443== LEAK SUMMARY:
==12443==    definitely lost: 0 bytes in 0 blocks
==12443==    indirectly lost: 0 bytes in 0 blocks
==12443==      possibly lost: 0 bytes in 0 blocks
==12443==    still reachable: 18,754 bytes in 6 blocks
==12443==         suppressed: 0 bytes in 0 blocks
==12443== Reachable blocks (those to which a pointer was found) are not shown.
==12443== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==12443== 
==12443== For counts of detected and suppressed errors, rerun with: -v
==12443== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==12446== 
==12446== HEAP SUMMARY:
==12446==     in use at exit: 0 bytes in 0 blocks
==12446==   total heap usage: 17 allocs, 17 frees, 1,071,538 bytes allocated
==12446== 
==12446== All heap blocks were freed -- no leaks are possible
==12446== 
==12446== For counts of detected and suppressed errors, rerun with: -v
==12446== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==12463== 
==12463== HEAP SUMMARY:
==12463==     in use at exit: 0 bytes in 0 blocks
==12463==   total heap usage: 33 allocs, 33 frees, 1,079,333 bytes allocated
==12463== 
==12463== All heap blocks were freed -- no leaks are possible
==12463== 
==12463== For counts of detected and suppressed errors, rerun with: -v
==12463== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==12453== 
==12482== 
==12453== HEAP SUMMARY:
==12453==     in use at exit: 18,754 bytes in 6 blocks
==12453==   total heap usage: 27 allocs, 21 frees, 1,076,485 bytes allocated
==12453== 
==12482== HEAP SUMMARY:
==12482==     in use at exit: 0 bytes in 0 blocks
==12482==   total heap usage: 42 allocs, 42 frees, 1,083,244 bytes allocated
==12482== 
==12482== All heap blocks were freed -- no leaks are possible
==12482== 
==12482== For counts of detected and suppressed errors, rerun with: -v
==12482== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==12280== 
==12280== HEAP SUMMARY:
==12280==     in use at exit: 0 bytes in 0 blocks
==12280==   total heap usage: 42 allocs, 42 frees, 1,083,244 bytes allocated
==12280== 
==12280== All heap blocks were freed -- no leaks are possible
==12280== 
==12280== For counts of detected and suppressed errors, rerun with: -v
==12280== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==12453== LEAK SUMMARY:
==12453==    definitely lost: 0 bytes in 0 blocks
==12453==    indirectly lost: 0 bytes in 0 blocks
==12453==      possibly lost: 0 bytes in 0 blocks
==12453==    still reachable: 18,754 bytes in 6 blocks
==12453==         suppressed: 0 bytes in 0 blocks
==12453== Reachable blocks (those to which a pointer was found) are not shown.
==12453== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==12453== 
==12453== For counts of detected and suppressed errors, rerun with: -v
==12453== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
