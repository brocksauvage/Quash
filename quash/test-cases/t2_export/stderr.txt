==14257== Memcheck, a memory error detector
==14257== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==14257== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==14257== Command: /home/bsauvage/EECS678/Quash/quash/quash
==14257== 
IMPLEMENT ME: src/execute.c(line 71): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 365): create_process()
IMPLEMENT ME: src/execute.c(line 365): create_process()
==14700== Invalid write of size 1
==14700==    at 0x402564: get_current_directory (execute.c:44)
==14700==    by 0x40280A: run_pwd (execute.c:189)
==14700==    by 0x4028DA: child_run_command (execute.c:232)
==14700==    by 0x402AB5: create_process (execute.c:369)
==14700==    by 0x402BA6: run_script (execute.c:400)
==14700==    by 0x40132E: main (quash.c:132)
==14700==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==14700== 
==14700== 
==14700== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==14700==  Access not within mapped region at address 0x0
==14700==    at 0x402564: get_current_directory (execute.c:44)
==14700==    by 0x40280A: run_pwd (execute.c:189)
==14700==    by 0x4028DA: child_run_command (execute.c:232)
==14700==    by 0x402AB5: create_process (execute.c:369)
==14700==    by 0x402BA6: run_script (execute.c:400)
==14700==    by 0x40132E: main (quash.c:132)
==14700==  If you believe this happened as a result of a stack
==14700==  overflow in your program's main thread (unlikely but
==14700==  possible), you can try to increase the size of the
==14700==  main thread stack using the --main-stacksize= flag.
==14700==  The main thread stack size used in this run was 8388608.
IMPLEMENT ME: src/execute.c(line 71): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 365): create_process()
IMPLEMENT ME: src/execute.c(line 365): create_process()
IMPLEMENT ME: src/execute.c(line 71): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 365): create_process()
IMPLEMENT ME: src/execute.c(line 71): check_jobs_bg_status()
==14700== 
==14700== HEAP SUMMARY:
==14700==     in use at exit: 18,754 bytes in 6 blocks
==14700==   total heap usage: 10 allocs, 4 frees, 1,068,674 bytes allocated
==14700== 
==14700== LEAK SUMMARY:
==14700==    definitely lost: 0 bytes in 0 blocks
==14700==    indirectly lost: 0 bytes in 0 blocks
==14700==      possibly lost: 0 bytes in 0 blocks
==14700==    still reachable: 18,754 bytes in 6 blocks
==14700==         suppressed: 0 bytes in 0 blocks
==14700== Reachable blocks (those to which a pointer was found) are not shown.
==14700== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==14700== 
==14700== For counts of detected and suppressed errors, rerun with: -v
==14700== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
IMPLEMENT ME: src/execute.c(line 365): create_process()
IMPLEMENT ME: src/execute.c(line 365): create_process()
IMPLEMENT ME: src/execute.c(line 71): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 365): create_process()
==14721== Invalid write of size 1
==14721==    at 0x402564: get_current_directory (execute.c:44)
==14721==    by 0x40280A: run_pwd (execute.c:189)
==14721==    by 0x4028DA: child_run_command (execute.c:232)
==14721==    by 0x402AB5: create_process (execute.c:369)
==14721==    by 0x402BA6: run_script (execute.c:400)
==14721==    by 0x40132E: main (quash.c:132)
==14721==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==14721== 
==14721== 
==14721== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==14721==  Access not within mapped region at address 0x0
==14721==    at 0x402564: get_current_directory (execute.c:44)
==14721==    by 0x40280A: run_pwd (execute.c:189)
==14721==    by 0x4028DA: child_run_command (execute.c:232)
==14721==    by 0x402AB5: create_process (execute.c:369)
==14721==    by 0x402BA6: run_script (execute.c:400)
==14721==    by 0x40132E: main (quash.c:132)
==14721==  If you believe this happened as a result of a stack
==14721==  overflow in your program's main thread (unlikely but
==14721==  possible), you can try to increase the size of the
==14721==  main thread stack using the --main-stacksize= flag.
==14721==  The main thread stack size used in this run was 8388608.
IMPLEMENT ME: src/execute.c(line 365): create_process()
==14718== 
==14718== HEAP SUMMARY:
==14718==     in use at exit: 0 bytes in 0 blocks
==14718==   total heap usage: 17 allocs, 17 frees, 1,071,538 bytes allocated
==14718== 
==14718== All heap blocks were freed -- no leaks are possible
==14718== 
==14718== For counts of detected and suppressed errors, rerun with: -v
==14718== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
IMPLEMENT ME: src/execute.c(line 365): create_process()
==14723== 
==14723== HEAP SUMMARY:
==14723==     in use at exit: 0 bytes in 0 blocks
==14723==   total heap usage: 33 allocs, 33 frees, 1,079,333 bytes allocated
==14723== 
==14723== All heap blocks were freed -- no leaks are possible
==14723== 
==14723== For counts of detected and suppressed errors, rerun with: -v
==14723== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==14257== 
==14257== HEAP SUMMARY:
==14257==     in use at exit: 0 bytes in 0 blocks
==14257==   total heap usage: 42 allocs, 42 frees, 1,083,244 bytes allocated
==14257== 
==14257== All heap blocks were freed -- no leaks are possible
==14257== 
==14257== For counts of detected and suppressed errors, rerun with: -v
==14257== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==14721== 
==14721== HEAP SUMMARY:
==14721==     in use at exit: 18,754 bytes in 6 blocks
==14721==   total heap usage: 27 allocs, 21 frees, 1,076,485 bytes allocated
==14721== 
==14721== LEAK SUMMARY:
==14721==    definitely lost: 0 bytes in 0 blocks
==14721==    indirectly lost: 0 bytes in 0 blocks
==14721==      possibly lost: 0 bytes in 0 blocks
==14721==    still reachable: 18,754 bytes in 6 blocks
==14721==         suppressed: 0 bytes in 0 blocks
==14721== Reachable blocks (those to which a pointer was found) are not shown.
==14721== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==14721== 
==14721== For counts of detected and suppressed errors, rerun with: -v
==14721== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==14730== 
==14730== HEAP SUMMARY:
==14730==     in use at exit: 0 bytes in 0 blocks
==14730==   total heap usage: 42 allocs, 42 frees, 1,083,244 bytes allocated
==14730== 
==14730== All heap blocks were freed -- no leaks are possible
==14730== 
==14730== For counts of detected and suppressed errors, rerun with: -v
==14730== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
