==8036== Memcheck, a memory error detector
==8036== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==8036== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==8036== Command: /home/bsauvage/EECS678/Quash/quash/quash
==8036== 
IMPLEMENT ME: src/execute.c(line 84): check_jobs_bg_status()
==8250== Invalid write of size 1
==8250==    at 0x4027B9: get_current_directory (execute.c:58)
==8250==    by 0x402A4C: run_pwd (execute.c:202)
==8250==    by 0x402B1C: child_run_command (execute.c:249)
==8250==    by 0x402CF6: create_process (execute.c:362)
==8250==    by 0x402E43: run_script (execute.c:400)
==8250==    by 0x4013FE: main (quash.c:132)
==8250==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==8250== 
==8250== 
==8250== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==8250==  Access not within mapped region at address 0x0
==8250==    at 0x4027B9: get_current_directory (execute.c:58)
==8250==    by 0x402A4C: run_pwd (execute.c:202)
==8250==    by 0x402B1C: child_run_command (execute.c:249)
==8250==    by 0x402CF6: create_process (execute.c:362)
==8250==    by 0x402E43: run_script (execute.c:400)
==8250==    by 0x4013FE: main (quash.c:132)
==8250==  If you believe this happened as a result of a stack
==8250==  overflow in your program's main thread (unlikely but
==8250==  possible), you can try to increase the size of the
==8250==  main thread stack using the --main-stacksize= flag.
==8250==  The main thread stack size used in this run was 8388608.
IMPLEMENT ME: src/execute.c(line 84): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 84): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 84): check_jobs_bg_status()
==8250== 
==8250== HEAP SUMMARY:
==8250==     in use at exit: 17,730 bytes in 5 blocks
==8250==   total heap usage: 9 allocs, 4 frees, 1,067,650 bytes allocated
==8250== 
==8250== LEAK SUMMARY:
==8250==    definitely lost: 0 bytes in 0 blocks
==8250==    indirectly lost: 0 bytes in 0 blocks
==8250==      possibly lost: 0 bytes in 0 blocks
==8250==    still reachable: 17,730 bytes in 5 blocks
==8250==         suppressed: 0 bytes in 0 blocks
==8250== Reachable blocks (those to which a pointer was found) are not shown.
==8250== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8250== 
==8250== For counts of detected and suppressed errors, rerun with: -v
==8250== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==8262== Invalid write of size 1
==8262==    at 0x4027B9: get_current_directory (execute.c:58)
==8262==    by 0x402A4C: run_pwd (execute.c:202)
==8262==    by 0x402B1C: child_run_command (execute.c:249)
==8262==    by 0x402CF6: create_process (execute.c:362)
==8262==    by 0x402E43: run_script (execute.c:400)
==8262==    by 0x4013FE: main (quash.c:132)
==8262==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==8262== 
==8262== 
==8262== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==8262==  Access not within mapped region at address 0x0
==8262==    at 0x4027B9: get_current_directory (execute.c:58)
==8262==    by 0x402A4C: run_pwd (execute.c:202)
==8262==    by 0x402B1C: child_run_command (execute.c:249)
==8262==    by 0x402CF6: create_process (execute.c:362)
==8262==    by 0x402E43: run_script (execute.c:400)
==8262==    by 0x4013FE: main (quash.c:132)
==8262==  If you believe this happened as a result of a stack
==8262==  overflow in your program's main thread (unlikely but
==8262==  possible), you can try to increase the size of the
==8262==  main thread stack using the --main-stacksize= flag.
==8262==  The main thread stack size used in this run was 8388608.
IMPLEMENT ME: src/execute.c(line 84): check_jobs_bg_status()
==8256== 
==8256== HEAP SUMMARY:
==8256==     in use at exit: 0 bytes in 0 blocks
==8256==   total heap usage: 17 allocs, 17 frees, 1,071,538 bytes allocated
==8256== 
==8256== All heap blocks were freed -- no leaks are possible
==8256== 
==8256== For counts of detected and suppressed errors, rerun with: -v
==8256== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==8262== 
==8262== HEAP SUMMARY:
==8262==     in use at exit: 17,730 bytes in 5 blocks
==8262==   total heap usage: 26 allocs, 21 frees, 1,075,461 bytes allocated
==8262== 
==8262== LEAK SUMMARY:
==8262==    definitely lost: 0 bytes in 0 blocks
==8262==    indirectly lost: 0 bytes in 0 blocks
==8262==      possibly lost: 0 bytes in 0 blocks
==8262==    still reachable: 17,730 bytes in 5 blocks
==8262==         suppressed: 0 bytes in 0 blocks
==8262== Reachable blocks (those to which a pointer was found) are not shown.
==8262== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8262== 
==8262== For counts of detected and suppressed errors, rerun with: -v
==8262== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==8267== 
==8267== HEAP SUMMARY:
==8267==     in use at exit: 0 bytes in 0 blocks
==8267==   total heap usage: 33 allocs, 33 frees, 1,079,333 bytes allocated
==8267== 
==8267== All heap blocks were freed -- no leaks are possible
==8267== 
==8267== For counts of detected and suppressed errors, rerun with: -v
==8267== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==8036== 
==8279== 
==8036== HEAP SUMMARY:
==8036==     in use at exit: 0 bytes in 0 blocks
==8036==   total heap usage: 42 allocs, 42 frees, 1,083,244 bytes allocated
==8036== 
==8036== All heap blocks were freed -- no leaks are possible
==8036== 
==8036== For counts of detected and suppressed errors, rerun with: -v
==8279== HEAP SUMMARY:
==8279==     in use at exit: 0 bytes in 0 blocks
==8279==   total heap usage: 42 allocs, 42 frees, 1,083,244 bytes allocated
==8279== 
==8036== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==8279== All heap blocks were freed -- no leaks are possible
==8279== 
==8279== For counts of detected and suppressed errors, rerun with: -v
==8279== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
