==23876== Memcheck, a memory error detector
==23876== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==23876== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==23876== Command: /home/bsauvage/EECS678/Quash/quash/quash
==23876== 
IMPLEMENT ME: src/execute.c(line 94): check_jobs_bg_status()
==24006== Invalid write of size 1
==24006==    at 0x4039AB: get_current_directory (execute.c:68)
==24006==    by 0x403C3E: run_pwd (execute.c:212)
==24006==    by 0x403D0E: child_run_command (execute.c:259)
==24006==    by 0x403EE8: create_process (execute.c:372)
==24006==    by 0x404035: run_script (execute.c:410)
==24006==    by 0x4013FE: main (quash.c:132)
==24006==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==24006== 
==24006== 
==24006== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==24006==  Access not within mapped region at address 0x0
==24006==    at 0x4039AB: get_current_directory (execute.c:68)
==24006==    by 0x403C3E: run_pwd (execute.c:212)
==24006==    by 0x403D0E: child_run_command (execute.c:259)
==24006==    by 0x403EE8: create_process (execute.c:372)
==24006==    by 0x404035: run_script (execute.c:410)
==24006==    by 0x4013FE: main (quash.c:132)
==24006==  If you believe this happened as a result of a stack
==24006==  overflow in your program's main thread (unlikely but
==24006==  possible), you can try to increase the size of the
==24006==  main thread stack using the --main-stacksize= flag.
==24006==  The main thread stack size used in this run was 8388608.
IMPLEMENT ME: src/execute.c(line 94): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 94): check_jobs_bg_status()
==24006== 
==24006== HEAP SUMMARY:
==24006==     in use at exit: 17,730 bytes in 5 blocks
==24006==   total heap usage: 9 allocs, 4 frees, 1,067,650 bytes allocated
==24006== 
==24006== LEAK SUMMARY:
==24006==    definitely lost: 0 bytes in 0 blocks
==24006==    indirectly lost: 0 bytes in 0 blocks
==24006==      possibly lost: 0 bytes in 0 blocks
==24006==    still reachable: 17,730 bytes in 5 blocks
==24006==         suppressed: 0 bytes in 0 blocks
==24006== Reachable blocks (those to which a pointer was found) are not shown.
==24006== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==24006== 
==24006== For counts of detected and suppressed errors, rerun with: -v
==24006== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
IMPLEMENT ME: src/execute.c(line 94): check_jobs_bg_status()
==24021== Invalid write of size 1
==24021==    at 0x4039AB: get_current_directory (execute.c:68)
==24021==    by 0x403C3E: run_pwd (execute.c:212)
==24021==    by 0x403D0E: child_run_command (execute.c:259)
==24021==    by 0x403EE8: create_process (execute.c:372)
==24021==    by 0x404035: run_script (execute.c:410)
==24021==    by 0x4013FE: main (quash.c:132)
==24021==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==24021== 
==24021== 
==24021== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==24021==  Access not within mapped region at address 0x0
==24021==    at 0x4039AB: get_current_directory (execute.c:68)
==24021==    by 0x403C3E: run_pwd (execute.c:212)
==24021==    by 0x403D0E: child_run_command (execute.c:259)
==24021==    by 0x403EE8: create_process (execute.c:372)
==24021==    by 0x404035: run_script (execute.c:410)
==24021==    by 0x4013FE: main (quash.c:132)
==24021==  If you believe this happened as a result of a stack
==24021==  overflow in your program's main thread (unlikely but
==24021==  possible), you can try to increase the size of the
==24021==  main thread stack using the --main-stacksize= flag.
==24021==  The main thread stack size used in this run was 8388608.
IMPLEMENT ME: src/execute.c(line 94): check_jobs_bg_status()
==24014== 
==24014== HEAP SUMMARY:
==24014==     in use at exit: 0 bytes in 0 blocks
==24014==   total heap usage: 17 allocs, 17 frees, 1,071,538 bytes allocated
==24014== 
==24014== All heap blocks were freed -- no leaks are possible
==24014== 
==24014== For counts of detected and suppressed errors, rerun with: -v
==24014== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==24023== 
==24023== HEAP SUMMARY:
==24023==     in use at exit: 0 bytes in 0 blocks
==24023==   total heap usage: 33 allocs, 33 frees, 1,079,333 bytes allocated
==24023== 
==24023== All heap blocks were freed -- no leaks are possible
==24023== 
==24023== For counts of detected and suppressed errors, rerun with: -v
==24023== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==24021== 
==24021== HEAP SUMMARY:
==24021==     in use at exit: 17,730 bytes in 5 blocks
==24021==   total heap usage: 26 allocs, 21 frees, 1,075,461 bytes allocated
==24021== 
==24021== LEAK SUMMARY:
==24021==    definitely lost: 0 bytes in 0 blocks
==24021==    indirectly lost: 0 bytes in 0 blocks
==24021==      possibly lost: 0 bytes in 0 blocks
==24021==    still reachable: 17,730 bytes in 5 blocks
==24021==         suppressed: 0 bytes in 0 blocks
==24021== Reachable blocks (those to which a pointer was found) are not shown.
==24021== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==24021== 
==24021== For counts of detected and suppressed errors, rerun with: -v
==24021== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==24034== 
==24034== HEAP SUMMARY:
==24034==     in use at exit: 0 bytes in 0 blocks
==24034==   total heap usage: 42 allocs, 42 frees, 1,083,244 bytes allocated
==24034== 
==24034== All heap blocks were freed -- no leaks are possible
==24034== 
==24034== For counts of detected and suppressed errors, rerun with: -v
==24034== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==23876== 
==23876== HEAP SUMMARY:
==23876==     in use at exit: 0 bytes in 0 blocks
==23876==   total heap usage: 42 allocs, 42 frees, 1,083,244 bytes allocated
==23876== 
==23876== All heap blocks were freed -- no leaks are possible
==23876== 
==23876== For counts of detected and suppressed errors, rerun with: -v
==23876== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
