==7901== Memcheck, a memory error detector
==7901== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==7901== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==7901== Command: /home/bsauvage/EECS678/Quash/quash/quash
==7901== 
IMPLEMENT ME: src/execute.c(line 84): check_jobs_bg_status()
==8178== Invalid write of size 1
==8178==    at 0x4027B9: get_current_directory (execute.c:58)
==8178==    by 0x402A4C: run_pwd (execute.c:202)
==8178==    by 0x402B1C: child_run_command (execute.c:249)
==8178==    by 0x402CF6: create_process (execute.c:362)
==8178==    by 0x402E43: run_script (execute.c:400)
==8178==    by 0x4013FE: main (quash.c:132)
==8178==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==8178== 
==8178== 
==8178== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==8178==  Access not within mapped region at address 0x0
==8178==    at 0x4027B9: get_current_directory (execute.c:58)
==8178==    by 0x402A4C: run_pwd (execute.c:202)
==8178==    by 0x402B1C: child_run_command (execute.c:249)
==8178==    by 0x402CF6: create_process (execute.c:362)
==8178==    by 0x402E43: run_script (execute.c:400)
==8178==    by 0x4013FE: main (quash.c:132)
==8178==  If you believe this happened as a result of a stack
==8178==  overflow in your program's main thread (unlikely but
==8178==  possible), you can try to increase the size of the
==8178==  main thread stack using the --main-stacksize= flag.
==8178==  The main thread stack size used in this run was 8388608.
==7901== 
==7901== HEAP SUMMARY:
==7901==     in use at exit: 0 bytes in 0 blocks
==7901==   total heap usage: 9 allocs, 9 frees, 1,067,650 bytes allocated
==7901== 
==7901== All heap blocks were freed -- no leaks are possible
==7901== 
==7901== For counts of detected and suppressed errors, rerun with: -v
==7901== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==8178== 
==8178== HEAP SUMMARY:
==8178==     in use at exit: 17,730 bytes in 5 blocks
==8178==   total heap usage: 9 allocs, 4 frees, 1,067,650 bytes allocated
==8178== 
==8178== LEAK SUMMARY:
==8178==    definitely lost: 0 bytes in 0 blocks
==8178==    indirectly lost: 0 bytes in 0 blocks
==8178==      possibly lost: 0 bytes in 0 blocks
==8178==    still reachable: 17,730 bytes in 5 blocks
==8178==         suppressed: 0 bytes in 0 blocks
==8178== Reachable blocks (those to which a pointer was found) are not shown.
==8178== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8178== 
==8178== For counts of detected and suppressed errors, rerun with: -v
==8178== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
