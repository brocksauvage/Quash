==8021== Memcheck, a memory error detector
==8021== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==8021== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==8021== Command: /home/bsauvage/EECS678/Quash/quash/quash
==8021== 
IMPLEMENT ME: src/execute.c(line 84): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 84): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 84): check_jobs_bg_status()
==8282== Invalid write of size 1
==8282==    at 0x4027B9: get_current_directory (execute.c:58)
==8282==    by 0x402A4C: run_pwd (execute.c:202)
==8282==    by 0x402B1C: child_run_command (execute.c:249)
==8282==    by 0x402CF6: create_process (execute.c:362)
==8282==    by 0x402E43: run_script (execute.c:400)
==8282==    by 0x4013FE: main (quash.c:132)
==8282==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==8282== 
==8282== 
==8282== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==8282==  Access not within mapped region at address 0x0
==8282==    at 0x4027B9: get_current_directory (execute.c:58)
==8282==    by 0x402A4C: run_pwd (execute.c:202)
==8282==    by 0x402B1C: child_run_command (execute.c:249)
==8282==    by 0x402CF6: create_process (execute.c:362)
==8282==    by 0x402E43: run_script (execute.c:400)
==8282==    by 0x4013FE: main (quash.c:132)
==8282==  If you believe this happened as a result of a stack
==8282==  overflow in your program's main thread (unlikely but
==8282==  possible), you can try to increase the size of the
==8282==  main thread stack using the --main-stacksize= flag.
==8282==  The main thread stack size used in this run was 8388608.
==8276== 
==8276== HEAP SUMMARY:
==8276==     in use at exit: 0 bytes in 0 blocks
==8276==   total heap usage: 10 allocs, 10 frees, 1,071,746 bytes allocated
==8276== 
==8276== All heap blocks were freed -- no leaks are possible
==8276== 
==8276== For counts of detected and suppressed errors, rerun with: -v
==8276== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
IMPLEMENT ME: src/execute.c(line 84): check_jobs_bg_status()
==8282== 
==8282== HEAP SUMMARY:
==8282==     in use at exit: 17,730 bytes in 5 blocks
==8282==   total heap usage: 26 allocs, 21 frees, 1,079,591 bytes allocated
==8282== 
==8282== LEAK SUMMARY:
==8282==    definitely lost: 0 bytes in 0 blocks
==8282==    indirectly lost: 0 bytes in 0 blocks
==8282==      possibly lost: 0 bytes in 0 blocks
==8282==    still reachable: 17,730 bytes in 5 blocks
==8282==         suppressed: 0 bytes in 0 blocks
==8282== Reachable blocks (those to which a pointer was found) are not shown.
==8282== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8282== 
==8282== For counts of detected and suppressed errors, rerun with: -v
==8282== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==8308== Conditional jump or move depends on uninitialised value(s)
==8308==    at 0x4E83D54: vfprintf (in /usr/lib64/libc-2.23.so)
==8308==    by 0x4E8B906: fprintf (in /usr/lib64/libc-2.23.so)
==8308==    by 0x402970: run_echo (execute.c:143)
==8308==    by 0x402B10: child_run_command (execute.c:245)
==8308==    by 0x402CF6: create_process (execute.c:362)
==8308==    by 0x402E43: run_script (execute.c:400)
==8308==    by 0x4013FE: main (quash.c:132)
==8308==  Uninitialised value was created by a heap allocation
==8308==    at 0x4C2BBAD: malloc (vg_replace_malloc.c:299)
==8308==    by 0x403F9C: __initialize_memory_pool (memory_pool.c:44)
==8308==    by 0x404116: initialize_memory_pool (memory_pool.c:89)
==8308==    by 0x4013DD: main (quash.c:128)
==8308== 
==8021== 
==8021== HEAP SUMMARY:
==8021==     in use at exit: 0 bytes in 0 blocks
==8021==   total heap usage: 34 allocs, 34 frees, 1,083,479 bytes allocated
==8021== 
==8021== All heap blocks were freed -- no leaks are possible
==8021== 
==8021== For counts of detected and suppressed errors, rerun with: -v
==8021== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==8308== 
==8308== HEAP SUMMARY:
==8308==     in use at exit: 0 bytes in 0 blocks
==8308==   total heap usage: 35 allocs, 35 frees, 2,132,055 bytes allocated
==8308== 
==8308== All heap blocks were freed -- no leaks are possible
==8308== 
==8308== For counts of detected and suppressed errors, rerun with: -v
==8308== ERROR SUMMARY: 6 errors from 1 contexts (suppressed: 0 from 0)
